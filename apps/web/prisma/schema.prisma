// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          Role         @default(USER)
  firstName     String?
  lastName      String?
  teams         Team[]
  employees     TeamMember[]
  accounts      Account[]
  sessions      Session[]
}

enum Role {
  USER
  ADMIN
}

model Team {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String
  description String
  manager     User         @relation(fields: [userId], references: [id])
  userId      String
  members     TeamMember[]
}

model TeamMember {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  firstName       String
  lastName        String
  email           String            @unique
  joined          DateTime
  position        String
  manager         User              @relation(fields: [userId], references: [id])
  userId          String
  team            Team              @relation(fields: [teamId], references: [id])
  teamId          String
  monthlyFeedback MonthlyFeedback[]
}

model MonthlyFeedback {
  id               String      @id @default(uuid())
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  positiveFeedback String
  negativeFeedback String
  TeamMember       TeamMember? @relation(fields: [teamMemberId], references: [id])
  teamMemberId     String?
}
